import math

# Geometry input
nc     = 2					# [-] 1 or 2, indicates how many circumferencetial layers we have.
rInner = 90;				# [nm]
rAxon  = 3*rInner			# [nm]
rConn  = rInner*1.8;		# [nm] Maximum distance within cross-section where cross-link is made
nMT = 7 if nc == 1 else 19  # [-] Number of MT in one cross section

lMT0    = 1000.				# [nm] Initial Length of a single MT
lMTMax  = 2.*lMT0 			# [nm] Length of MT that can be added by polymerization (determines how many storage elements we need)
lAxon  = 1.5*lMT0			# [nm] Length of the modeled axon
lGap   = 0.01*lMTMax		# [nm] Length of gap in between two successive axons

dlLink = 33.			 		# [nm] Gap in between two crosslinks
thLink = 45.*math.pi/180.	# [rad] Angle of cross links wrt to orthogonal


# Material properties
E_MT   	= 1200.0			# [MPa] Microtubule stiffness
E_Dyn   = 10.				# [MPa] Dynein stiffness
eta_Med = 1.e-8				# [MPa*s] Viscosity of surrounding medium (water)

area_MT  = 1800.0			# [nm2] Initial corss-sectional area of MT
area_Dyn = 1.0				# [nm2] Initial cross-sectional area of dynein

force_Dyn = 0.0				# [pN] Force generated by dynein

minInitStretch_Dyn = 0.98	# [-] Minimum initial stretch of dynein
minStretch_Dyn = 0.95		# [-] Minimum stretch of dynein

maxInitStretch_Dyn = 1.05	# [-] Maximum initial stretch of dynein
maxStretch_Dyn = 1.5		# [-] Maximum stretch of dynein

activeStretch_Dyn = 0.9 	# [-] Active (contraction) stretch of dynein

# Mesh input
lStep  = 5. 				# [nm] Smallest step a motor can take, i.e., element length of MT

# Load
loadExt = 0.				# [pN] Force applied at right side

# Solver inputs
maxIter = 20;				# [-] Maximum number of iterations per step (if exceeded, dt decreases)
maxIterInc = 6;				# [-] Maximum number of iterations per step to allow increase in dt
maxStep = 2000;				# [-] Maximum number of steps (if exceeded, simulations stops)
tEnd = 100.;					# [s] End time of simulation
tLoad = 10;					# [s] Time in which load is applied
dt0  = tLoad;				# [s] Initial time step
dtMin = dt0/100.;				# [s] Minimum time step
dtMax = dt0;				# [s] Maximum time step
tolerance = 1.e-8;			# [-] Tolerance for convergence

optionYZ = 0				# If 0, all yz coordinates fixed, else yz disp is constant in each MT
plotOutput = True			# If true, paraview output is plotted
optionDynein = 0			# [-] 0 - cross links ordered to yield extension
							#     1 - cross links not ordered (to yield neither extension or contraction)
							# 	  2 - cross links ordered to yield contraction
# 'Viscosity' input
tCont = 100. 				# [s] Time between attachment and contraction random between 0-tCont 
tDest = tCont				# [s] Time between contraction and detachment random between 0-tDest 
tCrea = tDest+tCont 		# [s] Time between detachment and attachment random between 0-tCrea 
